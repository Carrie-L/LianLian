package com.carrie.lianlian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PLAN".
*/
public class PlanDao extends AbstractDao<Plan, Long> {

    public static final String TABLENAME = "PLAN";

    /**
     * Properties of entity Plan.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ImportantDegree = new Property(1, String.class, "importantDegree", false, "IMPORTANT_DEGREE");
        public final static Property Icon = new Property(2, Integer.class, "icon", false, "ICON");
        public final static Property Content = new Property(3, String.class, "content", false, "CONTENT");
        public final static Property Finish = new Property(4, boolean.class, "finish", false, "FINISH");
        public final static Property Remind = new Property(5, boolean.class, "remind", false, "REMIND");
        public final static Property Date = new Property(6, String.class, "date", false, "DATE");
        public final static Property StartTime = new Property(7, String.class, "startTime", false, "START_TIME");
        public final static Property EndTime = new Property(8, String.class, "endTime", false, "END_TIME");
    };


    public PlanDao(DaoConfig config) {
        super(config);
    }
    
    public PlanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PLAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"IMPORTANT_DEGREE\" TEXT," + // 1: importantDegree
                "\"ICON\" INTEGER," + // 2: icon
                "\"CONTENT\" TEXT NOT NULL ," + // 3: content
                "\"FINISH\" INTEGER NOT NULL ," + // 4: finish
                "\"REMIND\" INTEGER NOT NULL ," + // 5: remind
                "\"DATE\" TEXT NOT NULL ," + // 6: date
                "\"START_TIME\" TEXT," + // 7: startTime
                "\"END_TIME\" TEXT);"); // 8: endTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PLAN\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Plan entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String importantDegree = entity.getImportantDegree();
        if (importantDegree != null) {
            stmt.bindString(2, importantDegree);
        }
 
        Integer icon = entity.getIcon();
        if (icon != null) {
            stmt.bindLong(3, icon);
        }
        stmt.bindString(4, entity.getContent());
        stmt.bindLong(5, entity.getFinish() ? 1L: 0L);
        stmt.bindLong(6, entity.getRemind() ? 1L: 0L);
        stmt.bindString(7, entity.getDate());
 
        String startTime = entity.getStartTime();
        if (startTime != null) {
            stmt.bindString(8, startTime);
        }
 
        String endTime = entity.getEndTime();
        if (endTime != null) {
            stmt.bindString(9, endTime);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Plan readEntity(Cursor cursor, int offset) {
        Plan entity = new Plan( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // importantDegree
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // icon
            cursor.getString(offset + 3), // content
            cursor.getShort(offset + 4) != 0, // finish
            cursor.getShort(offset + 5) != 0, // remind
            cursor.getString(offset + 6), // date
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // startTime
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // endTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Plan entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setImportantDegree(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setIcon(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setContent(cursor.getString(offset + 3));
        entity.setFinish(cursor.getShort(offset + 4) != 0);
        entity.setRemind(cursor.getShort(offset + 5) != 0);
        entity.setDate(cursor.getString(offset + 6));
        entity.setStartTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setEndTime(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Plan entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Plan entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
