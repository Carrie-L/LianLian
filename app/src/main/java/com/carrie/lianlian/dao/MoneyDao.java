package com.carrie.lianlian.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MONEY".
*/
public class MoneyDao extends AbstractDao<Money, Long> {

    public static final String TABLENAME = "MONEY";

    /**
     * Properties of entity Money.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property ClassifyIcon = new Property(1, String.class, "classifyIcon", false, "CLASSIFY_ICON");
        public final static Property AccountIcon = new Property(2, String.class, "accountIcon", false, "ACCOUNT_ICON");
        public final static Property Classify = new Property(3, String.class, "classify", false, "CLASSIFY");
        public final static Property Account = new Property(4, String.class, "account", false, "ACCOUNT");
        public final static Property Content = new Property(5, String.class, "content", false, "CONTENT");
        public final static Property Income = new Property(6, String.class, "income", false, "INCOME");
        public final static Property Expense = new Property(7, String.class, "expense", false, "EXPENSE");
        public final static Property Price = new Property(8, String.class, "price", false, "PRICE");
        public final static Property State = new Property(9, int.class, "state", false, "STATE");
        public final static Property Date = new Property(10, String.class, "date", false, "DATE");
    };


    public MoneyDao(DaoConfig config) {
        super(config);
    }
    
    public MoneyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MONEY\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"CLASSIFY_ICON\" TEXT NOT NULL ," + // 1: classifyIcon
                "\"ACCOUNT_ICON\" TEXT NOT NULL ," + // 2: accountIcon
                "\"CLASSIFY\" TEXT NOT NULL ," + // 3: classify
                "\"ACCOUNT\" TEXT NOT NULL ," + // 4: account
                "\"CONTENT\" TEXT NOT NULL ," + // 5: content
                "\"INCOME\" TEXT," + // 6: income
                "\"EXPENSE\" TEXT," + // 7: expense
                "\"PRICE\" TEXT," + // 8: price
                "\"STATE\" INTEGER NOT NULL ," + // 9: state
                "\"DATE\" TEXT NOT NULL );"); // 10: date
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MONEY\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Money entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getClassifyIcon());
        stmt.bindString(3, entity.getAccountIcon());
        stmt.bindString(4, entity.getClassify());
        stmt.bindString(5, entity.getAccount());
        stmt.bindString(6, entity.getContent());
 
        String income = entity.getIncome();
        if (income != null) {
            stmt.bindString(7, income);
        }
 
        String expense = entity.getExpense();
        if (expense != null) {
            stmt.bindString(8, expense);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(9, price);
        }
        stmt.bindLong(10, entity.getState());
        stmt.bindString(11, entity.getDate());
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Money readEntity(Cursor cursor, int offset) {
        Money entity = new Money( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // classifyIcon
            cursor.getString(offset + 2), // accountIcon
            cursor.getString(offset + 3), // classify
            cursor.getString(offset + 4), // account
            cursor.getString(offset + 5), // content
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // income
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // expense
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // price
            cursor.getInt(offset + 9), // state
            cursor.getString(offset + 10) // date
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Money entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setClassifyIcon(cursor.getString(offset + 1));
        entity.setAccountIcon(cursor.getString(offset + 2));
        entity.setClassify(cursor.getString(offset + 3));
        entity.setAccount(cursor.getString(offset + 4));
        entity.setContent(cursor.getString(offset + 5));
        entity.setIncome(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setExpense(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPrice(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setState(cursor.getInt(offset + 9));
        entity.setDate(cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Money entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Money entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
